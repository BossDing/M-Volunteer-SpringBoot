<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.oneone1995.mvolunteer.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.github.oneone1995.mvolunteer.domain.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
  </resultMap>

  <!-- 查询包装有role的CustomUserDetails的ResultMap -->
  <resultMap id="CustomUserDetailsResultMap"
             type="com.github.oneone1995.mvolunteer.domain.CustomUserDetails"
             extends="BaseResultMap">
    <!-- 用户信息使用继承 -->

    <!-- role信息 -->
    <collection property="roles" ofType="com.github.oneone1995.mvolunteer.domain.Role">
      <id column="role_id" property="id" />
      <result column="name" property="name"/>
      <result column="type" property="type" />
    </collection>
  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.github.oneone1995.mvolunteer.domain.User">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user (username, password, email
      )
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.github.oneone1995.mvolunteer.domain.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, username, password, email
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, username, password, email
    from user
  </select>

  <select id="selectCustomUserDetailsByUsername" resultMap="CustomUserDetailsResultMap">
    SELECT
      `user`.id user_id,
      `user`.username,
      `user`.`password`,
      `user`.email,
      role.id role_id,
      role.`name`,
      role.type
    FROM
      user_role
      JOIN `user` ON `user`.id = user_role.user_id
      JOIN role ON role.id = user_role.role_id
    WHERE
      `user`.username = #{username}
  </select>

</mapper>